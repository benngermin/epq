## Overview
When a user launches the app and logs in via Single Sign-On (SSO), the application must handle course loading and user permissions seamlessly based on the provided parameters and user role. The following requirements ensure a smooth and secure user experience for both admin and non-admin users.

## Requirements

1. **Default Course Loading**  
   When the app is launched without a `course_id` parameter in the URL, it must automatically load the default course, **CPCU 500**. This ensures a consistent starting point for users who access the app without specifying a course.

2. **Course Loading with `course_id` Parameter**  
   If a `course_id` parameter is provided in the URL upon launching the app, the app must:
   - Parse the `course_id` parameter.
   - Load and display the corresponding course based on the provided ID. For example, if the `course_id` corresponds to **CPCU 552**, the app must display the CPCU 552 course content.

3. **User Role-Based Access and Functionality**  
   - **Non-Admin Users**:
     - Non-admin users must not have the ability to toggle between courses. After logging in via SSO, they will be directed to the **question set/dashboard page**, displaying either:
       - The course specified by the `course_id` parameter (if provided), or
       - The default course (CPCU 500) if no `course_id` is provided.
     - Non-admin users are prohibited from accessing the `/admin` domain. If they attempt to access it, they must be redirected to the dashboard page.
   - **Admin Users**:
     - Admin users (predefined in the system) must have access to an additional **course dropdown menu** displayed next to the question set dropdown. This dropdown allows admins to switch between courses to test different question sets.
     - Admin users must have full access to the `/admin` domain without redirection.

## Notes
- Ensure that the app handles invalid or unrecognized `course_id` parameters gracefully, potentially falling back to the default course (CPCU 500) or displaying an appropriate error message.
- Verify that admin users are correctly identified during SSO authentication using a predefined list or role-based access control mechanism.
- Implement proper redirection logic to prevent non-admin users from accessing restricted areas like the `/admin` domain.