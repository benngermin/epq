Ok. So what's happening is, there was some question set data already in the app before we began importing from the Bubble API. In addition to this, every time we import from Bubble, it seems data is being duplicated rather than overwritten or updated.

Based on your investigation, it looks like we've got duplicates from multiple import runs (e.g., the first run created Question Sets 1-3 with 85 questions each, and a later run added 4-6 with 80 questions each). To align with the content repo as the single source of truth (which only has 3 question sets for CPCU 500), please proceed with both actions you suggested:

Remove the duplicate question sets (4-6) from the database to clean up the current data.
Investigate and fix the import process to prevent future duplicates.
For the long-term fix, here's what needs to happen to standardize the connection and updates:

Add an 'Update Question Set Data' button in the admin interface.
When this button is pressed, the app makes API call(s) to the content repo Bubble app to retrieve the most up-to-date, single source of truth question set data. The goal is not to create duplicates every time we make these API calls, but rather to: (a) add any new question sets that don't exist yet, and (b) overwrite existing question sets with the latest version from the repo if they match based on the Bubble unique ID.
When this action is triggered, it needs to update ALL question sets. This means retrieving every single question set from the content repo, determining which course it's from, and identifying whether we already have it based on the Bubble unique ID provided. If it exists, update/overwrite it; if not, insert it as new.
The 'Update Question Set Data' button should be greyed out while this API call/update action is running. Once done, the button becomes clickable again, and the admin user can simply click it again if needed.
The overall idea is that the content repo is a central holding place for content used across many apps. We need a standard connection to this content repo and a way to fetch (and update) the data from it on a regular basis upon user action.
Let me know if you need any clarification or additional details!