# EPQ Mobile SSO Endpoint - Implementation Instructions

**Task:** Implement `/auth/mobile-sso` endpoint for mobile app authentication
**Detailed Reference:** See attached `EPQ_WEB_APP_IMPLEMENTATION.md` for complete specifications

---

## Critical Information

- **Endpoint:** GET `/auth/mobile-sso`
- **Parameters:** `token` (JWT from Cognito), `courseId` (4-digit integer as string, e.g., "8433")
- **Cognito User Pool:** us-east-1_vAMMFcpew (region: us-east-1)
- **JWKS URL:** https://cognito-idp.us-east-1.amazonaws.com/us-east-1_vAMMFcpew/.well-known/jwks.json
- **Course ID Format:** 4-digit integers (8433), NOT strings like "CPCU500"

---

## Step 1: Install Dependencies

```bash
npm install jsonwebtoken jwks-rsa express-rate-limit validator
```

---

## Step 2: Create JWT Validation Module

**File:** `auth/cognito-validator.js` (or similar)

```javascript
const jwt = require('jsonwebtoken');
const jwksClient = require('jwks-rsa');

const client = jwksClient({
  jwksUri: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_vAMMFcpew/.well-known/jwks.json',
  cache: true,
  cacheMaxAge: 86400000,
  rateLimit: true,
  jwksRequestsPerMinute: 10
});

function getKey(header, callback) {
  client.getSigningKey(header.kid, (err, key) => {
    if (err) return callback(err);
    callback(null, key.getPublicKey());
  });
}

function validateCognitoToken(token) {
  return new Promise((resolve, reject) => {
    jwt.verify(token, getKey, {
      issuer: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_vAMMFcpew',
      algorithms: ['RS256']
    }, (err, decoded) => {
      if (err) return reject(err);
      if (decoded.token_use !== 'id') return reject(new Error('Not an ID token'));
      if (decoded.exp < Math.floor(Date.now() / 1000)) return reject(new Error('Token expired'));
      resolve(decoded);
    });
  });
}

module.exports = { validateCognitoToken };
```

---

## Step 3: Implement Endpoint

**File:** `routes/auth.js` (or your route file)

```javascript
const express = require('express');
const rateLimit = require('express-rate-limit');
const validator = require('validator');
const { validateCognitoToken } = require('../auth/cognito-validator');

const router = express.Router();

const ssoLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 10,
  message: 'Too many requests'
});

router.get('/mobile-sso', ssoLimiter, async (req, res) => {
  const { token, courseId } = req.query;

  try {
    // 1. Validate parameters exist
    if (!token || !courseId) {
      throw new Error('Missing parameters');
    }

    // 2. Validate courseId is 4-digit integer
    if (!validator.isInt(courseId, { min: 1000, max: 9999 })) {
      throw new Error('Invalid course ID');
    }
    const courseIdInt = parseInt(courseId, 10);

    // 3. Validate JWT token
    const decoded = await validateCognitoToken(token);
    const { sub: cognitoUserId, email, email_verified: emailVerified } = decoded;

    // 4. Find or create user in your database
    let user = await findUserByEmail(email); // YOUR FUNCTION
    if (!user) {
      user = await createUser({
        cognitoUserId,
        email,
        emailVerified,
        authSource: 'mobile_sso'
      }); // YOUR FUNCTION
    }

    // 5. Verify course exists
    const course = await findCourseById(courseIdInt); // YOUR FUNCTION
    if (!course) {
      console.error('Course not found:', courseIdInt);
      return res.redirect('/courses');
    }

    // 6. Create session
    req.session.regenerate((err) => {
      if (err) throw err;

      req.session.userId = user.id;
      req.session.email = email;
      req.session.authMethod = 'mobile_sso';

      req.session.save((err) => {
        if (err) throw err;

        // Log success
        console.log('MOBILE_SSO_SUCCESS', {
          userId: user.id,
          email,
          courseId: courseIdInt
        });

        // Redirect to course
        res.redirect(`/course/${courseIdInt}`);
      });
    });

  } catch (err) {
    // Log error
    console.error('MOBILE_SSO_ERROR', {
      errorMessage: err.message,
      courseId
    });

    // Redirect to OAuth on any error
    res.redirect('/auth/cognito');
  }
});

module.exports = router;
```

---

## Step 4: Database Requirements

### Users Table

Must store Cognito user ID:

```sql
CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  cognito_user_id VARCHAR(255) UNIQUE,
  email VARCHAR(255) UNIQUE NOT NULL,
  email_verified BOOLEAN DEFAULT FALSE,
  auth_source VARCHAR(50),
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_users_cognito_id ON users(cognito_user_id);
CREATE INDEX idx_users_email ON users(email);
```

### Courses Table

Must use integer IDs:

```sql
-- Ensure courses table uses integer IDs
CREATE TABLE IF NOT EXISTS courses (
  id INTEGER PRIMARY KEY,  -- 4-digit integer like 8433
  name VARCHAR(255) NOT NULL,
  title VARCHAR(255),
  description TEXT
);

-- Insert CPCU 500 with correct ID
INSERT INTO courses (id, name, title) VALUES
  (8433, 'CPCU 500', 'Foundations of Risk Management, Insurance, and Professionalism')
ON CONFLICT DO NOTHING;
```

---

## Step 5: User Management Functions

Implement these functions in your database layer:

```javascript
// Find user by email
async function findUserByEmail(email) {
  const result = await db.query('SELECT * FROM users WHERE email = $1', [email]);
  return result.rows[0] || null;
}

// Create new user
async function createUser({ cognitoUserId, email, emailVerified, authSource }) {
  const result = await db.query(
    `INSERT INTO users (cognito_user_id, email, email_verified, auth_source, created_at)
     VALUES ($1, $2, $3, $4, NOW())
     RETURNING *`,
    [cognitoUserId, email, emailVerified, authSource]
  );
  return result.rows[0];
}

// Find course by integer ID
async function findCourseById(courseId) {
  const result = await db.query('SELECT * FROM courses WHERE id = $1', [courseId]);
  return result.rows[0] || null;
}
```

---

## Step 6: Environment Variables

Add to your `.env` or environment config:

```bash
COGNITO_REGION=us-east-1
COGNITO_USER_POOL_ID=us-east-1_vAMMFcpew
COGNITO_JWKS_URI=https://cognito-idp.us-east-1.amazonaws.com/us-east-1_vAMMFcpew/.well-known/jwks.json
SESSION_SECRET=<your-secure-random-string>
```

---

## Step 7: Session Configuration

Ensure secure session settings:

```javascript
const session = require('express-session');

app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: {
    secure: process.env.NODE_ENV === 'production', // HTTPS only in prod
    httpOnly: true,
    sameSite: 'lax',
    maxAge: 24 * 60 * 60 * 1000 // 24 hours
  }
}));
```

---

## Testing Checklist

After implementation, test these scenarios:

1. **Valid Token + Course ID:**
   - Action: Mobile app opens EPQ for CPCU 500 (courseId=8433)
   - Expected: User lands on /course/8433 without login screen

2. **Invalid Token:**
   - Action: Use invalid/expired token
   - Expected: Redirects to /auth/cognito (OAuth login)

3. **Invalid Course ID:**
   - Action: Use courseId=abc or courseId=999
   - Expected: Redirects to /auth/cognito

4. **Non-existent Course:**
   - Action: Use valid token but courseId=9999
   - Expected: Redirects to /courses (course list)

---

## Error Handling Rules

**All errors redirect to `/auth/cognito`** (standard OAuth login) except:
- Course not found â†’ redirect to `/courses`

**Never expose error details to users.** Always log detailed errors server-side:

```javascript
console.error('MOBILE_SSO_ERROR', {
  timestamp: new Date().toISOString(),
  errorType: 'token_validation_failed',
  errorMessage: err.message,
  courseId
});
```

---

## Integration Points

1. **Mount the route:**
   ```javascript
   app.use('/auth', require('./routes/auth'));
   ```

2. **Test URL format:**
   ```
   https://exampracticequestions.theinstituteslab.org/auth/mobile-sso?token=eyJ...&courseId=8433
   ```

3. **Coordinate with mobile team:**
   - Test with CPCU 500 (courseId=8433)
   - Verify token validation works
   - Check session creation
   - Confirm redirect to correct course

---

## Common Issues & Solutions

**Issue:** "Token validation failed"
- **Check:** Verify JWKS URL is reachable
- **Check:** Ensure token is ID token (not access token)
- **Check:** User Pool ID is correct: us-east-1_vAMMFcpew

**Issue:** "Course not found"
- **Check:** Course ID 8433 exists in database
- **Check:** Courses table uses INTEGER id column
- **Check:** parseInt(courseId, 10) converts correctly

**Issue:** "Session not created"
- **Check:** Session middleware configured
- **Check:** Session store (Redis/PostgreSQL) is running
- **Check:** Cookie settings allow persistence

---

## Reference Documentation

**Detailed Guide:** `EPQ_WEB_APP_IMPLEMENTATION.md` (attach this file)
Contains:
- Complete code examples
- Security best practices
- Monitoring and logging
- Deployment procedures
- Troubleshooting guide

**Mobile App Repo:** `ti-lab-mobile-app`
Key files:
- `lib/services/epq_launcher_service.dart` - Mobile SSO launcher
- `lib/models/course.dart` - Course model with integer epqCourseId

---

## Success Criteria

- [ ] Endpoint GET /auth/mobile-sso exists
- [ ] JWT validation working with Cognito
- [ ] Course ID parsed as 4-digit integer
- [ ] Users created/found in database
- [ ] Session established successfully
- [ ] Redirects to /course/{courseId}
- [ ] Error handling redirects to /auth/cognito
- [ ] Rate limiting configured (10 req/15min)
- [ ] HTTPS enforced in production
- [ ] Tested with mobile app end-to-end
