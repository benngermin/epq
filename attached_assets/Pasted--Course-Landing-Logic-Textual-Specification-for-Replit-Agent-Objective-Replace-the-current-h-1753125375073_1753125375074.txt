# Course Landing Logic – Textual Specification for Replit Agent

## Objective
Replace the current “home‑screen with every course card” experience with a **direct‑to‑assessment** flow that reacts to two URL parameters passed from Moodle:

| Parameter | Example | Purpose |
|-----------|---------|---------|
| `course_id` (string, lowercase) | `cpcu_500` | Determines **which course** the learner should land in. |
| `assignment_name` (string, lowercase) | `chapter_1_homework` | *Ignored for now*, but still parse/read for future extensibility. |

> **No `course_id` → default to the first course in `courseData`.**

## Runtime Rules
1. **Launch Path**  
   The first screen the learner sees is always an **individual question‑set page**, never a course list.
   - Immediately load the first question set inside the resolved course (index 0 of `course.questionSets`).

2. **Course Resolution**  
   - **If `course_id` parameter exists** in `window.location.search` → find matching course in `window.courseData` and make it `currentCourse`.  
   - **If `course_id` is missing or empty** → pick `window.courseData[0]` as `currentCourse`.
   - **If lookup fails** (invalid id) → fallback to first course and log a console warning.

3. **Admin vs. Regular Learner**  
   - `isAdmin()` (implement via your existing auth/session layer) gates extra UI:
     - **Admins** see **both** a *Course dropdown* **and** a *Question‑Set dropdown* on the assessment header so they can jump between courses and sets without relaunching.
     - **Learners** see **only** the *Question‑Set dropdown* (for the currently loaded course). They cannot change courses inside the app.

4. **State Updates & Navigation Helpers**  
   - After computing `currentCourse`, set `window.currentCourse` for global use.  
   - Call `loadQuestionSet(firstSet.id)` to render the assessment UI.  
   - Provide `window.showCourseDropdown(bool)` helper to show/hide the course selector according to role.  
   - If an Admin picks a different course from the dropdown, update `currentCourse`, rebuild the *Question‑Set* dropdown, and auto‑select that course’s first set (or maintain previously viewed set if still present).

5. **No Structural Homepage**  
   There is **no master dashboard** listing every course. All navigation comes from:
   - Moodle launch URL (primary learner flow).  
   - Admin‑only course dropdown (internal QA/testing flow).

## Implementation Hints
- Listen on `DOMContentLoaded` to perform parameter parsing and initial course resolution before any UI renders.
- Use `new URLSearchParams(window.location.search)` for robust query parsing.
- Maintain existing `window.courseData` structure; no schema change required.
- `assignment_name` should still be harvested and stored (e.g., `window.currentAssignmentName`) even though unused—future‑proofing for analytics.
- Log meaningful console warnings for missing question sets or undefined courses to aid QA.

## Acceptance Criteria Checklist
- [ ] Launching `/dashboard?course_id=CPCU_500&assignment_name=Unit1` shows CPCU‑500 Set 1 immediately.
- [ ] Launching `/dashboard` (no params) loads first course in list and its first set.
- [ ] As learner, course dropdown is **hidden**; question‑set dropdown visible.
- [ ] As admin, both dropdowns are visible and functional; switching course reloads first set of that course.
- [ ] There is no page or state where all courses are visible simultaneously.

---
**End of specification – hand off to Claude 4 Sonnet agent for implementation.**
