Currently, our app only supports multiple_choice question types. We need to expand it to handle these additional question types: fill_in_blank, matching, true_false, pick_from_list, and ordering. For each new type, the app should render an appropriate UI element/interface based on the question_type when displaying a question. Use the provided schemas to parse the question data, and implement interactive elements (e.g., inputs, dropdowns, drag-and-drop) that allow users to submit answers, which can then be checked against the correct_answer.

Here's a detailed explanation of each new type, including its schema and an example. Please implement the UI for each accordinglyâ€”focus on making it user-friendly and matching the type (e.g., text input for fill_in_blank, radio buttons for true_false, etc.).

Fill in Blank (question_type: "fill_in_blank")
Questions requiring text or numeric input. UI: Show the question_text with a blank (e.g., input field) where the user types their answer. Support case-insensitive checking by default unless case_sensitive is true. If acceptable_answers are provided, treat them as alternatives to correct_answer.

Schema:

json

Collapse

Wrap

Copy
{
  "question_number": "number - Sequential question number",
  "loid": "string - Learning Objective ID (5 digits)",
  "question_text": "string - The question text",
  "question_type": "fill_in_blank",
  "topic_focus": "string (optional) - Specific topic or focus area",
  "answer_choices": "array[string] - Empty array or list of acceptable answers",
  "correct_answer": "string - The correct answer (text or number)",
  "acceptable_answers": "array[string] (optional) - Alternative correct answers",
  "case_sensitive": "boolean (optional) - Whether answer is case-sensitive (default: false)"
}
Example:

json

Collapse

Wrap

Copy
{
  "question_number": 2,
  "loid": "00234",
  "question_text": "The standard deductible for comprehensive coverage is typically _____ dollars.",
  "question_type": "fill_in_blank",
  "answer_choices": [],
  "correct_answer": "500",
  "acceptable_answers": [
    "$500",
    "five hundred"
  ],
  "case_sensitive": false
}
Matching (question_type: "matching")
Match items from left column to right column. UI: Display two columns (left and right) with draggable or selectable pairs. Users match left items to right ones. On submit, compare to the parsed correct_answer (which is a JSON array of pairs).

Schema:

json

Collapse

Wrap

Copy
{
  "question_number": "number - Sequential question number",
  "loid": "string - Learning Objective ID (5 digits)",
  "question_text": "string - The question text",
  "question_type": "matching",
  "topic_focus": "string (optional) - Specific topic or focus area",
  "answer_choices": "array[{left: string, right: string}] - Pairs to match",
  "correct_answer": "string - JSON string of correct pairs or 'MANUAL_REVIEW'",
  "matching_pairs": "array[object] (optional) - Detailed matching pair information"
}
Example:

json

Collapse

Wrap

Copy
{
  "question_number": 3,
  "loid": "00345",
  "question_text": "Match each insurance term with its correct definition:",
  "question_type": "matching",
  "answer_choices": [
    {
      "left": "Premium",
      "right": "Amount paid for insurance coverage"
    },
    {
      "left": "Deductible",
      "right": "Out-of-pocket amount before insurance pays"
    },
    {
      "left": "Liability",
      "right": "Legal responsibility for damages"
    }
  ],
  "correct_answer": "[{\"left\":\"Premium\",\"right\":\"Amount paid for insurance coverage\"},{\"left\":\"Deductible\",\"right\":\"Out-of-pocket amount before insurance pays\"},{\"left\":\"Liability\",\"right\":\"Legal responsibility for damages\"}]"
}
True False (question_type: "true_false")
Simple true or false questions. UI: Show the question_text with radio buttons or toggles for 'True' and 'False'. Always use the fixed answer_choices array.

Schema:

json

Collapse

Wrap

Copy
{
  "question_number": "number - Sequential question number",
  "loid": "string - Learning Objective ID (5 digits)",
  "question_text": "string - The question text",
  "question_type": "true_false",
  "topic_focus": "string (optional) - Specific topic or focus area",
  "answer_choices": "array[string] - Always ['True', 'False']",
  "correct_answer": "string - Either 'True' or 'False'"
}
Example:

json

Collapse

Wrap

Copy
{
  "question_number": 4,
  "loid": "00456",
  "question_text": "Comprehensive coverage includes protection against collision damage.",
  "question_type": "true_false",
  "answer_choices": [
    "True",
    "False"
  ],
  "correct_answer": "False"
}
Pick from List (question_type: "pick_from_list")
Select from dropdown or list of options. UI: Display the question_text with a dropdown or selectable list. If allow_multiple is true, support multi-select (e.g., checkboxes).

Schema:

json

Collapse

Wrap

Copy
{
  "question_number": "number - Sequential question number",
  "loid": "string - Learning Objective ID (5 digits)",
  "question_text": "string - The question text",
  "question_type": "pick_from_list",
  "topic_focus": "string (optional) - Specific topic or focus area",
  "answer_choices": "array[string] - List of options (minimum 2)",
  "correct_answer": "string - The correct option",
  "allow_multiple": "boolean (optional) - Whether multiple selections allowed (default: false)"
}
Example:

json

Collapse

Wrap

Copy
{
  "question_number": 5,
  "loid": "00567",
  "question_text": "From the list below, select the type of coverage that protects against theft:",
  "question_type": "pick_from_list",
  "answer_choices": [
    "Liability",
    "Collision",
    "Comprehensive",
    "Medical Payments"
  ],
  "correct_answer": "Comprehensive",
  "allow_multiple": false
}
Ordering (question_type: "ordering")
Arrange items in correct sequence. UI: Show the question_text with a list of draggable items that users can reorder. On submit, compare the user's order to the correct_answer (JSON array) or correct_order indices.

Schema:

json

Collapse

Wrap

Copy
{
  "question_number": "number - Sequential question number",
  "loid": "string - Learning Objective ID (5 digits)",
  "question_text": "string - The question text",
  "question_type": "ordering",
  "topic_focus": "string (optional) - Specific topic or focus area",
  "answer_choices": "array[string] - Items to be ordered (minimum 2)",
  "correct_answer": "string - JSON string of correct order",
  "correct_order": "array[number] (optional) - Array of indices in correct order"
}
Example:

json

Collapse

Wrap

Copy
{
  "question_number": 6,
  "loid": "00678",
  "question_text": "Arrange the following steps in the claims process in the correct order:",
  "question_type": "ordering",
  "answer_choices": [
    "File the claim",
    "Document the damage",
    "Contact your insurance company",
    "Receive payment"
  ],
  "correct_answer": "[\"Document the damage\",\"Contact your insurance company\",\"File the claim\",\"Receive payment\"]",
  "correct_order": [
    1,
    2,
    0,
    3
  ]
}
Please implement these interfaces step by step, starting with updating the question rendering logic to switch based on question_type. Let me know if you need any clarifications!